// Generated by rstantools.  Do not edit by hand.

#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_bayes_zoib_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_bayes_zoib");
    reader.add_event(110, 108, "end", "model_bayes_zoib");
    return reader;
}
#include <stan_meta_header.hpp>
class model_bayes_zoib
  : public stan::model::model_base_crtp<model_bayes_zoib> {
private:
        int n;
        int np_y;
        int np_m;
        vector_d y;
        vector_d m;
        vector_d A;
        matrix_d X_y;
        matrix_d X_m;
public:
    model_bayes_zoib(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_bayes_zoib(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_bayes_zoib_namespace::model_bayes_zoib";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 42;
            context__.validate_dims("data initialization", "n", "int", context__.to_vec());
            n = int(0);
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            n = vals_i__[pos__++];
            check_greater_or_equal(function__, "n", n, 1);
            current_statement_begin__ = 43;
            context__.validate_dims("data initialization", "np_y", "int", context__.to_vec());
            np_y = int(0);
            vals_i__ = context__.vals_i("np_y");
            pos__ = 0;
            np_y = vals_i__[pos__++];
            check_greater_or_equal(function__, "np_y", np_y, 1);
            current_statement_begin__ = 44;
            context__.validate_dims("data initialization", "np_m", "int", context__.to_vec());
            np_m = int(0);
            vals_i__ = context__.vals_i("np_m");
            pos__ = 0;
            np_m = vals_i__[pos__++];
            check_greater_or_equal(function__, "np_m", np_m, 1);
            current_statement_begin__ = 45;
            validate_non_negative_index("y", "n", n);
            context__.validate_dims("data initialization", "y", "vector_d", context__.to_vec(n));
            y = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("y");
            pos__ = 0;
            size_t y_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < y_j_1_max__; ++j_1__) {
                y(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "y", y, 0);
            check_less_or_equal(function__, "y", y, 1);
            current_statement_begin__ = 46;
            validate_non_negative_index("m", "n", n);
            context__.validate_dims("data initialization", "m", "vector_d", context__.to_vec(n));
            m = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("m");
            pos__ = 0;
            size_t m_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < m_j_1_max__; ++j_1__) {
                m(j_1__) = vals_r__[pos__++];
            }
            check_greater_or_equal(function__, "m", m, 0);
            check_less_or_equal(function__, "m", m, 1);
            current_statement_begin__ = 47;
            validate_non_negative_index("A", "n", n);
            context__.validate_dims("data initialization", "A", "vector_d", context__.to_vec(n));
            A = Eigen::Matrix<double, Eigen::Dynamic, 1>(n);
            vals_r__ = context__.vals_r("A");
            pos__ = 0;
            size_t A_j_1_max__ = n;
            for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                A(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 48;
            validate_non_negative_index("X_y", "n", n);
            validate_non_negative_index("X_y", "np_y", np_y);
            context__.validate_dims("data initialization", "X_y", "matrix_d", context__.to_vec(n,np_y));
            X_y = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, np_y);
            vals_r__ = context__.vals_r("X_y");
            pos__ = 0;
            size_t X_y_j_2_max__ = np_y;
            size_t X_y_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < X_y_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_y_j_1_max__; ++j_1__) {
                    X_y(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 49;
            validate_non_negative_index("X_m", "n", n);
            validate_non_negative_index("X_m", "np_m", np_m);
            context__.validate_dims("data initialization", "X_m", "matrix_d", context__.to_vec(n,np_m));
            X_m = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(n, np_m);
            vals_r__ = context__.vals_r("X_m");
            pos__ = 0;
            size_t X_m_j_2_max__ = np_m;
            size_t X_m_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < X_m_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_m_j_1_max__; ++j_1__) {
                    X_m(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 53;
            validate_non_negative_index("beta_mediator", "np_m", np_m);
            validate_non_negative_index("beta_mediator", "4", 4);
            num_params_r__ += (np_m * 4);
            current_statement_begin__ = 54;
            validate_non_negative_index("beta_outcome", "np_y", np_y);
            validate_non_negative_index("beta_outcome", "4", 4);
            num_params_r__ += (np_y * 4);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_bayes_zoib() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 53;
        if (!(context__.contains_r("beta_mediator")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_mediator missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_mediator");
        pos__ = 0U;
        validate_non_negative_index("beta_mediator", "np_m", np_m);
        validate_non_negative_index("beta_mediator", "4", 4);
        context__.validate_dims("parameter initialization", "beta_mediator", "matrix_d", context__.to_vec(np_m,4));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta_mediator(np_m, 4);
        size_t beta_mediator_j_2_max__ = 4;
        size_t beta_mediator_j_1_max__ = np_m;
        for (size_t j_2__ = 0; j_2__ < beta_mediator_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_mediator_j_1_max__; ++j_1__) {
                beta_mediator(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(beta_mediator);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_mediator: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 54;
        if (!(context__.contains_r("beta_outcome")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta_outcome missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta_outcome");
        pos__ = 0U;
        validate_non_negative_index("beta_outcome", "np_y", np_y);
        validate_non_negative_index("beta_outcome", "4", 4);
        context__.validate_dims("parameter initialization", "beta_outcome", "matrix_d", context__.to_vec(np_y,4));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta_outcome(np_y, 4);
        size_t beta_outcome_j_2_max__ = 4;
        size_t beta_outcome_j_1_max__ = np_y;
        for (size_t j_2__ = 0; j_2__ < beta_outcome_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_outcome_j_1_max__; ++j_1__) {
                beta_outcome(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(beta_outcome);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta_outcome: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 53;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> beta_mediator;
            (void) beta_mediator;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_mediator = in__.matrix_constrain(np_m, 4, lp__);
            else
                beta_mediator = in__.matrix_constrain(np_m, 4);
            current_statement_begin__ = 54;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> beta_outcome;
            (void) beta_outcome;  // dummy to suppress unused var warning
            if (jacobian__)
                beta_outcome = in__.matrix_constrain(np_y, 4, lp__);
            else
                beta_outcome = in__.matrix_constrain(np_y, 4);
            // transformed parameters
            current_statement_begin__ = 58;
            validate_non_negative_index("eta_y", "n", n);
            validate_non_negative_index("eta_y", "4", 4);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> eta_y(n, 4);
            stan::math::initialize(eta_y, DUMMY_VAR__);
            stan::math::fill(eta_y, DUMMY_VAR__);
            current_statement_begin__ = 59;
            validate_non_negative_index("eta_m", "n", n);
            validate_non_negative_index("eta_m", "4", 4);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> eta_m(n, 4);
            stan::math::initialize(eta_m, DUMMY_VAR__);
            stan::math::fill(eta_m, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 61;
            stan::math::assign(eta_y, multiply(X_y, beta_outcome));
            current_statement_begin__ = 62;
            stan::math::assign(eta_m, multiply(X_m, beta_mediator));
            current_statement_begin__ = 64;
            stan::model::assign(eta_y, 
                        stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                        stan::model::deep_copy(inv_logit(stan::model::rvalue(eta_y, stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), "eta_y"))), 
                        "assigning variable eta_y");
            current_statement_begin__ = 65;
            stan::model::assign(eta_y, 
                        stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), 
                        stan::model::deep_copy(stan::math::exp(stan::model::rvalue(eta_y, stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), "eta_y"))), 
                        "assigning variable eta_y");
            current_statement_begin__ = 66;
            stan::model::assign(eta_m, 
                        stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                        stan::model::deep_copy(inv_logit(stan::model::rvalue(eta_m, stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), "eta_m"))), 
                        "assigning variable eta_m");
            current_statement_begin__ = 67;
            stan::model::assign(eta_m, 
                        stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), 
                        stan::model::deep_copy(stan::math::exp(stan::model::rvalue(eta_m, stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), "eta_m"))), 
                        "assigning variable eta_m");
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 58;
            size_t eta_y_j_1_max__ = n;
            size_t eta_y_j_2_max__ = 4;
            for (size_t j_1__ = 0; j_1__ < eta_y_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < eta_y_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(eta_y(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: eta_y" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable eta_y: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 59;
            size_t eta_m_j_1_max__ = n;
            size_t eta_m_j_2_max__ = 4;
            for (size_t j_1__ = 0; j_1__ < eta_m_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < eta_m_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(eta_m(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: eta_m" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable eta_m: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            // model body
            current_statement_begin__ = 74;
            for (int j = 1; j <= 4; ++j) {
                current_statement_begin__ = 75;
                for (int i = 1; i <= np_y; ++i) {
                    current_statement_begin__ = 76;
                    lp_accum__.add(normal_log<propto__>(get_base1(beta_outcome, i, j, "beta_outcome", 1), 0.0, 10.0));
                }
                current_statement_begin__ = 78;
                for (int i = 1; i <= np_m; ++i) {
                    current_statement_begin__ = 79;
                    lp_accum__.add(normal_log<propto__>(get_base1(beta_mediator, i, j, "beta_mediator", 1), 0.0, 10.0));
                }
            }
            current_statement_begin__ = 84;
            for (int i = 1; i <= n; ++i) {
                current_statement_begin__ = 85;
                if (as_bool(logical_eq(get_base1(y, i, "y", 1), 0.0))) {
                    current_statement_begin__ = 86;
                    lp_accum__.add(bernoulli_logit_log(1, get_base1(eta_y, i, 1, "eta_y", 1)));
                } else if (as_bool(logical_eq(get_base1(y, i, "y", 1), 1))) {
                    current_statement_begin__ = 88;
                    lp_accum__.add((bernoulli_logit_log(1, get_base1(eta_y, i, 2, "eta_y", 1)) + bernoulli_logit_log(0, get_base1(eta_y, i, 1, "eta_y", 1))));
                } else {
                    current_statement_begin__ = 90;
                    lp_accum__.add(((bernoulli_logit_log(0, get_base1(eta_y, i, 2, "eta_y", 1)) + bernoulli_logit_log(0, get_base1(eta_y, i, 1, "eta_y", 1))) + beta_log(get_base1(y, i, "y", 1), (get_base1(eta_y, i, 3, "eta_y", 1) * get_base1(eta_y, i, 4, "eta_y", 1)), ((1 - get_base1(eta_y, i, 3, "eta_y", 1)) * get_base1(eta_y, i, 4, "eta_y", 1)))));
                }
                current_statement_begin__ = 94;
                if (as_bool(logical_eq(get_base1(m, i, "m", 1), 0.0))) {
                    current_statement_begin__ = 95;
                    lp_accum__.add(bernoulli_logit_log(1, get_base1(eta_m, i, 1, "eta_m", 1)));
                } else if (as_bool(logical_eq(get_base1(m, i, "m", 1), 1.0))) {
                    current_statement_begin__ = 98;
                    lp_accum__.add((bernoulli_logit_log(1, get_base1(eta_m, i, 2, "eta_m", 1)) + bernoulli_logit_log(0, get_base1(eta_m, i, 1, "eta_m", 1))));
                } else {
                    current_statement_begin__ = 101;
                    lp_accum__.add(((bernoulli_logit_log(0, get_base1(eta_m, i, 2, "eta_m", 1)) + bernoulli_logit_log(0, get_base1(eta_m, i, 1, "eta_m", 1))) + beta_log(get_base1(m, i, "m", 1), (get_base1(eta_m, i, 3, "eta_m", 1) * get_base1(eta_m, i, 4, "eta_m", 1)), ((1 - get_base1(eta_m, i, 3, "eta_m", 1)) * get_base1(eta_m, i, 4, "eta_m", 1)))));
                }
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta_mediator");
        names__.push_back("beta_outcome");
        names__.push_back("eta_y");
        names__.push_back("eta_m");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(np_m);
        dims__.push_back(4);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(np_y);
        dims__.push_back(4);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dims__.push_back(4);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(n);
        dims__.push_back(4);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_bayes_zoib_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta_mediator = in__.matrix_constrain(np_m, 4);
        size_t beta_mediator_j_2_max__ = 4;
        size_t beta_mediator_j_1_max__ = np_m;
        for (size_t j_2__ = 0; j_2__ < beta_mediator_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_mediator_j_1_max__; ++j_1__) {
                vars__.push_back(beta_mediator(j_1__, j_2__));
            }
        }
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> beta_outcome = in__.matrix_constrain(np_y, 4);
        size_t beta_outcome_j_2_max__ = 4;
        size_t beta_outcome_j_1_max__ = np_y;
        for (size_t j_2__ = 0; j_2__ < beta_outcome_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_outcome_j_1_max__; ++j_1__) {
                vars__.push_back(beta_outcome(j_1__, j_2__));
            }
        }
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 58;
            validate_non_negative_index("eta_y", "n", n);
            validate_non_negative_index("eta_y", "4", 4);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> eta_y(n, 4);
            stan::math::initialize(eta_y, DUMMY_VAR__);
            stan::math::fill(eta_y, DUMMY_VAR__);
            current_statement_begin__ = 59;
            validate_non_negative_index("eta_m", "n", n);
            validate_non_negative_index("eta_m", "4", 4);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> eta_m(n, 4);
            stan::math::initialize(eta_m, DUMMY_VAR__);
            stan::math::fill(eta_m, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 61;
            stan::math::assign(eta_y, multiply(X_y, beta_outcome));
            current_statement_begin__ = 62;
            stan::math::assign(eta_m, multiply(X_m, beta_mediator));
            current_statement_begin__ = 64;
            stan::model::assign(eta_y, 
                        stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                        stan::model::deep_copy(inv_logit(stan::model::rvalue(eta_y, stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), "eta_y"))), 
                        "assigning variable eta_y");
            current_statement_begin__ = 65;
            stan::model::assign(eta_y, 
                        stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), 
                        stan::model::deep_copy(stan::math::exp(stan::model::rvalue(eta_y, stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), "eta_y"))), 
                        "assigning variable eta_y");
            current_statement_begin__ = 66;
            stan::model::assign(eta_m, 
                        stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), 
                        stan::model::deep_copy(inv_logit(stan::model::rvalue(eta_m, stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list())), "eta_m"))), 
                        "assigning variable eta_m");
            current_statement_begin__ = 67;
            stan::model::assign(eta_m, 
                        stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), 
                        stan::model::deep_copy(stan::math::exp(stan::model::rvalue(eta_m, stan::model::cons_list(stan::model::index_min_max(1, n), stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list())), "eta_m"))), 
                        "assigning variable eta_m");
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t eta_y_j_2_max__ = 4;
                size_t eta_y_j_1_max__ = n;
                for (size_t j_2__ = 0; j_2__ < eta_y_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < eta_y_j_1_max__; ++j_1__) {
                        vars__.push_back(eta_y(j_1__, j_2__));
                    }
                }
                size_t eta_m_j_2_max__ = 4;
                size_t eta_m_j_1_max__ = n;
                for (size_t j_2__ = 0; j_2__ < eta_m_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < eta_m_j_1_max__; ++j_1__) {
                        vars__.push_back(eta_m(j_1__, j_2__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_bayes_zoib";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_mediator_j_2_max__ = 4;
        size_t beta_mediator_j_1_max__ = np_m;
        for (size_t j_2__ = 0; j_2__ < beta_mediator_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_mediator_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_mediator" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t beta_outcome_j_2_max__ = 4;
        size_t beta_outcome_j_1_max__ = np_y;
        for (size_t j_2__ = 0; j_2__ < beta_outcome_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_outcome_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_outcome" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t eta_y_j_2_max__ = 4;
            size_t eta_y_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < eta_y_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < eta_y_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "eta_y" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t eta_m_j_2_max__ = 4;
            size_t eta_m_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < eta_m_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < eta_m_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "eta_m" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_mediator_j_2_max__ = 4;
        size_t beta_mediator_j_1_max__ = np_m;
        for (size_t j_2__ = 0; j_2__ < beta_mediator_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_mediator_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_mediator" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t beta_outcome_j_2_max__ = 4;
        size_t beta_outcome_j_1_max__ = np_y;
        for (size_t j_2__ = 0; j_2__ < beta_outcome_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < beta_outcome_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "beta_outcome" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t eta_y_j_2_max__ = 4;
            size_t eta_y_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < eta_y_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < eta_y_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "eta_y" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t eta_m_j_2_max__ = 4;
            size_t eta_m_j_1_max__ = n;
            for (size_t j_2__ = 0; j_2__ < eta_m_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < eta_m_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "eta_m" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_bayes_zoib_namespace::model_bayes_zoib stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
